const std = @import("std");
const println = @import("./solo5_utils.zen").println;
const BlockOffset = @import("./solo5.zen").BlockOffset;
const BlockDevice = @import("./solo5_utils.zen").block.BlockDevice;
const solo5_start_info = @import("./solo5.zen").solo5_start_info;

comptime {
    _ = @import("boot.zen");
}

pub fn main(si: *solo5_start_info) anyerror!void {
    println("Hello, Solo5!!!", .{});
    const cmdline = si.cmdline;
    println("cmdline(len={}): {s}", .{ strlen(cmdline), cmdline });
    var block_dev = BlockDevice.init(undefined, undefined, "storage");

    block_dev.acquire() catch |err| {
        println("Could not acquire 'storage' block device\n", .{});
        return;
    };

    var off: BlockOffset = 0;
    while (off < block_dev.get_capacity()) : (off += (10 * block_dev.get_block_size())) {
        if (check_one_block(&mut block_dev, off) == false) {
            println("check failed", .{});
            break;
        }
    }
}

fn strlen(cstr: [*]u8) usize {
    var i: usize = 0;
    return while (true) : (i += 1) {
        if (cstr[i] == 0) {
            break i;
        }
    } else 0;
}

fn check_one_block(blk: *mut BlockDevice, offset: BlockOffset) bool {
    var write_buf = [_]u8{0} ** 512;
    var read_buf = [_]u8{0} ** 512;

    for (write_buf) |*v, i| {
        v.* = @to(u8, '0') + @intCast(u8, i % 10);
    }

    blk.block_write(offset, &mut write_buf) catch |err| {
        return false;
    };
    blk.block_read(offset, &mut read_buf) catch |err| {
        return false;
    };

    return for (write_buf) |v, i| {
        if (v != read_buf[i]) {
            break false;
        }
    } else true;
}
